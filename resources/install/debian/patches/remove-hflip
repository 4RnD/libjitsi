Description: Removes hflip, filters internal api availbale in ffmpeg but not in libav
Index: libjitsi/src/native/ffmpeg/org_jitsi_impl_neomedia_codec_FFmpeg.c
===================================================================
--- libjitsi.orig/src/native/ffmpeg/org_jitsi_impl_neomedia_codec_FFmpeg.c	2013-11-11 06:03:23.817608000 -0500
+++ libjitsi/src/native/ffmpeg/org_jitsi_impl_neomedia_codec_FFmpeg.c	2013-11-11 06:06:14.037608000 -0500
@@ -454,14 +454,14 @@
 DEFINE_AVCODECCONTEXT_I_PROPERTY_SETTER(trellis, trellis)
 DEFINE_AVCODECCONTEXT_I_PROPERTY_SETTER(workaround_1bugs, workaround_bugs)
 
-JNIEXPORT jlong JNICALL
+/*JNIEXPORT jlong JNICALL
 Java_org_jitsi_impl_neomedia_codec_FFmpeg_avfilter_1graph_1alloc
     (JNIEnv *env, jclass clazz)
 {
     return (jlong) (intptr_t) avfilter_graph_alloc();
-}
+}*/
 
-JNIEXPORT jint JNICALL
+/*JNIEXPORT jint JNICALL
 Java_org_jitsi_impl_neomedia_codec_FFmpeg_avfilter_1graph_1config
     (JNIEnv *env, jclass clazz, jlong graph, jlong log_ctx)
 {
@@ -470,18 +470,18 @@
             avfilter_graph_config(
                     (AVFilterGraph *) (intptr_t) graph,
                     (AVClass *) (intptr_t) log_ctx);
-}
+}*/
 
-JNIEXPORT void JNICALL
+/*JNIEXPORT void JNICALL
 Java_org_jitsi_impl_neomedia_codec_FFmpeg_avfilter_1graph_1free
     (JNIEnv *env, jclass clazz, jlong graph)
 {
     AVFilterGraph *graph_ = (AVFilterGraph *) (intptr_t) graph;
 
     avfilter_graph_free(&graph_);
-}
+}*/
 
-JNIEXPORT jlong JNICALL
+/*JNIEXPORT jlong JNICALL
 Java_org_jitsi_impl_neomedia_codec_FFmpeg_avfilter_1graph_1get_1filter
     (JNIEnv *env, jclass clazz, jlong graph, jstring name)
 {
@@ -499,23 +499,23 @@
     else
         filter = NULL;
     return (jlong) (intptr_t) filter;
-}
+}*/
 
-static int
+/*static int
 ffsink_end_frame(AVFilterLink *link)
 {
     if (link->cur_buf)
         link->dst->priv = avfilter_ref_buffer(link->cur_buf, ~0);
     return 0;
-}
+}*/
 
-static int
+/*static int
 ffsink_query_formats(AVFilterContext *ctx)
 {
     AVFilterContext *src = ctx;
     int err;
 
-    /* Find buffer. */
+    / * Find buffer. * /
 #ifdef _JITSI_LIBAV_
     while (src && src->input_count && src->inputs)
 #else
@@ -530,7 +530,7 @@
             break;
     }
 
-    /* Make ffsink output in the format in which buffer inputs. */
+    / * Make ffsink output in the format in which buffer inputs. * /
     if (src)
     {
         const int pix_fmts[] = { src->outputs[0]->in_formats->formats[0], -1 };
@@ -557,9 +557,9 @@
 ffsink_uninit(AVFilterContext *ctx)
 {
     ctx->priv = NULL;
-}
+}*/
 
-JNIEXPORT jint JNICALL
+/*JNIEXPORT jint JNICALL
 Java_org_jitsi_impl_neomedia_codec_FFmpeg_avfilter_1graph_1parse
     (JNIEnv *env, jclass clazz,
     jlong graph, jstring filters, jlong inputs, jlong outputs, jlong log_ctx)
@@ -579,26 +579,26 @@
                     (AVFilterInOut **) (intptr_t) outputs,
                     (AVClass *) (intptr_t) log_ctx);
 
-        /*
+        / *
          * FIXME The implementation at the time of this writing presumes that
          * the first filter is buffer, the last filter is nullsink meant to be
          * ffsink and the ffsink is expected to output in the format in which
          * the buffer inputs.
-         */
+         * /
         if (0 == ret)
         {
-            /* Turn nullsink into ffsink. */
+            / * Turn nullsink into ffsink. * /
             unsigned filterCount = graph_->filter_count;
 
             if (filterCount)
             {
                 AVFilterContext *ffsink = graph_->filters[filterCount - 1];
 
-                /*
+                / *
                  * Make sure query_format of ffsink outputs in the format in
                  * which buffer inputs. Otherwise, the output format may end up
                  * different on the C and Java sides.
-                 */
+                 * /
                 ffsink->filter->uninit = ffsink_uninit;
                 ffsink->priv = NULL;
                 ffsink->filter->query_formats = ffsink_query_formats;
@@ -614,7 +614,7 @@
     else
         ret = AVERROR(ENOMEM);
     return (jint) ret;
-}
+}*/
 
 JNIEXPORT void JNICALL
 Java_org_jitsi_impl_neomedia_codec_FFmpeg_avfilter_1register_1all
@@ -623,12 +623,13 @@
     avfilter_register_all();
 }
 
-JNIEXPORT void JNICALL
+
+/*JNIEXPORT void JNICALL
 Java_org_jitsi_impl_neomedia_codec_FFmpeg_avfilter_1unref_1buffer
     (JNIEnv *env, jclass clazz, jlong ref)
 {
     avfilter_unref_buffer((AVFilterBufferRef *) (intptr_t) ref);
-}
+}*/
 
 JNIEXPORT jlong JNICALL
 Java_org_jitsi_impl_neomedia_codec_FFmpeg_avframe_1get_1pts
@@ -693,7 +694,7 @@
                     (int) width, (int) height);
 }
 
-JNIEXPORT jlong JNICALL
+/*JNIEXPORT jlong JNICALL
 Java_org_jitsi_impl_neomedia_codec_FFmpeg_get_1filtered_1video_1frame
     (JNIEnv *env, jclass clazz,
     jlong input, jint width, jint height, jint pixFmt,
@@ -717,12 +718,12 @@
             {
                 AVFrame *output_ = (AVFrame *) (intptr_t) output;
 
-                /*
+                / *
                  * The data of cur_buf will be returned into output so it needs
                  * to exist at least while output needs it. So take ownership of
                  * cur_buf and the user of output will unref it when they are
                  * done with output.
-                 */
+                 * /
                 ffsink_->priv = NULL;
 
                 memcpy(output_->data, ref->data, sizeof(output_->data));
@@ -736,7 +737,7 @@
         }
     }
     return (jlong) (intptr_t) ref;
-}
+}*/
 
 JNIEXPORT void JNICALL
 Java_org_jitsi_impl_neomedia_codec_FFmpeg_memcpy___3IIIJ
Index: libjitsi/src/native/ffmpeg/org_jitsi_impl_neomedia_codec_FFmpeg.h
===================================================================
--- libjitsi.orig/src/native/ffmpeg/org_jitsi_impl_neomedia_codec_FFmpeg.h	2013-11-11 06:03:23.817608000 -0500
+++ libjitsi/src/native/ffmpeg/org_jitsi_impl_neomedia_codec_FFmpeg.h	2013-11-11 06:06:14.037608000 -0500
@@ -435,41 +435,41 @@
  * Class:     org_jitsi_impl_neomedia_codec_FFmpeg
  * Method:    avfilter_graph_alloc
  * Signature: ()J
- */
+
 JNIEXPORT jlong JNICALL Java_org_jitsi_impl_neomedia_codec_FFmpeg_avfilter_1graph_1alloc
-  (JNIEnv *, jclass);
+  (JNIEnv *, jclass); */
 
 /*
  * Class:     org_jitsi_impl_neomedia_codec_FFmpeg
  * Method:    avfilter_graph_config
  * Signature: (JJ)I
- */
+
 JNIEXPORT jint JNICALL Java_org_jitsi_impl_neomedia_codec_FFmpeg_avfilter_1graph_1config
-  (JNIEnv *, jclass, jlong, jlong);
+  (JNIEnv *, jclass, jlong, jlong); */
 
 /*
  * Class:     org_jitsi_impl_neomedia_codec_FFmpeg
  * Method:    avfilter_graph_free
  * Signature: (J)V
- */
+
 JNIEXPORT void JNICALL Java_org_jitsi_impl_neomedia_codec_FFmpeg_avfilter_1graph_1free
-  (JNIEnv *, jclass, jlong);
+  (JNIEnv *, jclass, jlong); */
 
 /*
  * Class:     org_jitsi_impl_neomedia_codec_FFmpeg
  * Method:    avfilter_graph_get_filter
  * Signature: (JLjava/lang/String;)J
- */
+
 JNIEXPORT jlong JNICALL Java_org_jitsi_impl_neomedia_codec_FFmpeg_avfilter_1graph_1get_1filter
-  (JNIEnv *, jclass, jlong, jstring);
+  (JNIEnv *, jclass, jlong, jstring); */
 
 /*
  * Class:     org_jitsi_impl_neomedia_codec_FFmpeg
  * Method:    avfilter_graph_parse
  * Signature: (JLjava/lang/String;JJJ)I
- */
+
 JNIEXPORT jint JNICALL Java_org_jitsi_impl_neomedia_codec_FFmpeg_avfilter_1graph_1parse
-  (JNIEnv *, jclass, jlong, jstring, jlong, jlong, jlong);
+  (JNIEnv *, jclass, jlong, jstring, jlong, jlong, jlong); */
 
 /*
  * Class:     org_jitsi_impl_neomedia_codec_FFmpeg
@@ -483,10 +483,10 @@
  * Class:     org_jitsi_impl_neomedia_codec_FFmpeg
  * Method:    avfilter_unref_buffer
  * Signature: (J)V
- */
+
 JNIEXPORT void JNICALL Java_org_jitsi_impl_neomedia_codec_FFmpeg_avfilter_1unref_1buffer
   (JNIEnv *, jclass, jlong);
-
+ */
 /*
  * Class:     org_jitsi_impl_neomedia_codec_FFmpeg
  * Method:    avframe_get_pts
@@ -531,9 +531,9 @@
  * Class:     org_jitsi_impl_neomedia_codec_FFmpeg
  * Method:    get_filtered_video_frame
  * Signature: (JIIIJJJ)J
- */
+
 JNIEXPORT jlong JNICALL Java_org_jitsi_impl_neomedia_codec_FFmpeg_get_1filtered_1video_1frame
-  (JNIEnv *, jclass, jlong, jint, jint, jint, jlong, jlong, jlong);
+  (JNIEnv *, jclass, jlong, jint, jint, jint, jlong, jlong, jlong); */
 
 /*
  * Class:     org_jitsi_impl_neomedia_codec_FFmpeg
Index: libjitsi/src/org/jitsi/impl/neomedia/MediaServiceImpl.java
===================================================================
--- libjitsi.orig/src/org/jitsi/impl/neomedia/MediaServiceImpl.java	2013-11-11 06:03:23.825608000 -0500
+++ libjitsi/src/org/jitsi/impl/neomedia/MediaServiceImpl.java	2013-11-11 06:06:07.029608000 -0500
@@ -1123,7 +1123,7 @@
                                 locator.getProtocol()))
                             codecs = new Codec[] { scaler };
                         else
-                            codecs = new Codec[] { new HFlip(), scaler };
+                            codecs = new Codec[] { /*new HFlip(),*/ scaler };
 
                         trackControl.setCodecChain(codecs);
                         break;
Index: libjitsi/src/org/jitsi/impl/neomedia/device/VideoMediaDeviceSession.java
===================================================================
--- libjitsi.orig/src/org/jitsi/impl/neomedia/device/VideoMediaDeviceSession.java	2013-11-11 06:03:23.861608000 -0500
+++ libjitsi/src/org/jitsi/impl/neomedia/device/VideoMediaDeviceSession.java	2013-11-11 06:06:09.557608000 -0500
@@ -513,7 +513,7 @@
                             {
                                 controllerUpdateForCreateLocalVisualComponent(
                                     ev,
-                                    hflip);
+                                    false);
                             }
                         });
                     localPlayer.configure();
